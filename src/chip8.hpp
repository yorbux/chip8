#ifndef __CHIP8_H__
#define __CHIP8_H__

#include <iostream>
#include <chrono>
#include <cstdint>

#define NUM_KEYS 16
#define MEMORY 4096
#define STACK_SIZE 16
#define FONTSET_SIZE 80
#define TIMER_MAX 255

#define CHIP8_RAM_START_ADDR 0x000
#define CHIP8_RAM_END_ADDR 0x1FF
#define PROGRAM_START_ADDR 0x200
#define PROGRAM_END_ADDR 0xFFF

#define SCREEN_WIDTH 64
#define SCREEN_HEIGHT 32

const static uint8_t FONTSET[] = { 
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};

struct Chip8;
struct Display;

struct Cpu {
    uint8_t reg[16];
    uint16_t ireg;
    uint16_t pcreg;
    uint16_t sp_reg;

    uint16_t current_op;
    uint16_t instruction;

    Chip8* machine;
};

struct Chip8 {
    uint8_t screen[SCREEN_HEIGHT][SCREEN_WIDTH];
    uint8_t keys[NUM_KEYS];
    bool key_pressed = false;

    uint8_t memory[MEMORY];
    uint16_t stack[STACK_SIZE];

    uint8_t delay_timer;
    uint8_t sound_timer;

    bool emulator_running;

    uint16_t tick_counter;

    Cpu* cpu;
    Display* display;
};

void chip8_init(std::string rom_path);
void chip8_run();

#endif